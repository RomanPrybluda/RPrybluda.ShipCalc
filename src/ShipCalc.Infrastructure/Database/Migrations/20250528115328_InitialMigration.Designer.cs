// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ShipCalc.Infrastructure.Database;

#nullable disable

namespace ShipCalc.Infrastructure.Database.Migrations
{
    [DbContext(typeof(ShipCalcDbContext))]
    [Migration("20250528115328_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ShipCalc.Domain.Calculation.CorrectionFactors.CapacityIceStrengthCorrFactor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<decimal>("ConstantA")
                        .HasPrecision(5, 4)
                        .HasColumnType("numeric(5,4)")
                        .HasColumnName("constant_a");

                    b.Property<decimal>("ConstantB")
                        .HasPrecision(4, 1)
                        .HasColumnType("numeric(4,1)")
                        .HasColumnName("constant_b");

                    b.Property<int>("IceClass")
                        .HasColumnType("integer")
                        .HasColumnName("ice_class");

                    b.HasKey("Id")
                        .HasName("pk_capacity_ice_strength_corr_factors");

                    b.ToTable("capacity_ice_strength_corr_factors", (string)null);
                });

            modelBuilder.Entity("ShipCalc.Domain.Calculation.CorrectionFactors.IASuperAndIAIceCorrFactor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<decimal>("CorrectionFactor")
                        .HasPrecision(3, 2)
                        .HasColumnType("numeric(3,2)")
                        .HasColumnName("correction_factor");

                    b.Property<int>("IceClass")
                        .HasColumnType("integer")
                        .HasColumnName("ice_class");

                    b.HasKey("Id")
                        .HasName("pk_ia_super_and_ia_ice_corr_factors");

                    b.ToTable("ia_super_and_ia_ice_corr_factors", (string)null);
                });

            modelBuilder.Entity("ShipCalc.Domain.Calculation.CorrectionFactors.RefDesignBlockCoeff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<decimal>("BlockCoefficient")
                        .HasPrecision(3, 2)
                        .HasColumnType("numeric(3,2)")
                        .HasColumnName("block_coefficient");

                    b.Property<int?>("MaxDeadweight")
                        .HasColumnType("integer")
                        .HasColumnName("max_deadweight");

                    b.Property<int?>("MinDeadweight")
                        .HasColumnType("integer")
                        .HasColumnName("min_deadweight");

                    b.Property<int>("ShipType")
                        .HasColumnType("integer")
                        .HasColumnName("ship_type");

                    b.HasKey("Id")
                        .HasName("pk_ref_design_block_coeffs");

                    b.ToTable("ref_design_block_coeffs", (string)null);
                });

            modelBuilder.Entity("ShipCalc.Domain.Calculations.CarbonIntensityIndicator.CarbonIntensityIndicatorCalculation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<decimal>("AttainedCarbonIntensityIndicator")
                        .HasPrecision(10, 3)
                        .HasColumnType("numeric(10,3)")
                        .HasColumnName("attained_carbon_intensity_indicator");

                    b.Property<DateTime>("CalculationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("calculation_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<decimal>("Capacity")
                        .HasPrecision(10, 3)
                        .HasColumnType("numeric(10,3)")
                        .HasColumnName("capacity");

                    b.Property<decimal>("CarbonIntensityIndicatorNumericalRating")
                        .HasPrecision(10, 3)
                        .HasColumnType("numeric(10,3)")
                        .HasColumnName("carbon_intensity_indicator_numerical_rating");

                    b.Property<int>("CarbonIntensityIndicatorRating")
                        .HasColumnType("integer")
                        .HasColumnName("carbon_intensity_indicator_rating");

                    b.Property<decimal>("Co2EmissionsInTons")
                        .HasPrecision(10, 3)
                        .HasColumnType("numeric(10,3)")
                        .HasColumnName("co2emissions_in_tons");

                    b.Property<decimal>("DistanceTravelledInNMs")
                        .HasPrecision(10, 3)
                        .HasColumnType("numeric(10,3)")
                        .HasColumnName("distance_travelled_in_n_ms");

                    b.Property<decimal>("IASuperAndIAIceCorrFactor")
                        .HasPrecision(10, 3)
                        .HasColumnType("numeric(10,3)")
                        .HasColumnName("ia_super_and_ia_ice_corr_factor");

                    b.Property<decimal>("IceClasedShipCapacityCorrFactor")
                        .HasPrecision(10, 3)
                        .HasColumnType("numeric(10,3)")
                        .HasColumnName("ice_clased_ship_capacity_corr_factor");

                    b.Property<decimal>("RefLine")
                        .HasPrecision(10, 3)
                        .HasColumnType("numeric(10,3)")
                        .HasColumnName("ref_line");

                    b.Property<decimal>("RefLineParameterA")
                        .HasPrecision(10, 3)
                        .HasColumnType("numeric(10,3)")
                        .HasColumnName("ref_line_parameter_a");

                    b.Property<decimal>("RefLineParameterC")
                        .HasPrecision(10, 3)
                        .HasColumnType("numeric(10,3)")
                        .HasColumnName("ref_line_parameter_c");

                    b.Property<int>("RefLineReductionFactor")
                        .HasColumnType("integer")
                        .HasColumnName("ref_line_reduction_factor");

                    b.Property<decimal>("RequiredCarbonIntensityIndicator")
                        .HasPrecision(10, 3)
                        .HasColumnType("numeric(10,3)")
                        .HasColumnName("required_carbon_intensity_indicator");

                    b.Property<Guid>("ShipId")
                        .HasColumnType("uuid")
                        .HasColumnName("ship_id")
                        .HasComment("Foreign key referencing the associated Ship");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.HasKey("Id")
                        .HasName("pk_calculation_datas");

                    b.HasIndex("ShipId")
                        .IsUnique()
                        .HasDatabaseName("ix_calculation_datas_ship_id");

                    b.ToTable("calculation_datas", (string)null);
                });

            modelBuilder.Entity("ShipCalc.Domain.Calculations.CarbonIntensityIndicator.RatingThreshold", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<decimal>("D1")
                        .HasPrecision(3, 2)
                        .HasColumnType("numeric(3,2)")
                        .HasColumnName("d1")
                        .HasComment("Threshold D1 for CII rating");

                    b.Property<decimal>("D2")
                        .HasPrecision(3, 2)
                        .HasColumnType("numeric(3,2)")
                        .HasColumnName("d2")
                        .HasComment("Threshold D2 for CII rating");

                    b.Property<decimal>("D3")
                        .HasPrecision(3, 2)
                        .HasColumnType("numeric(3,2)")
                        .HasColumnName("d3")
                        .HasComment("Threshold D3 for CII rating");

                    b.Property<decimal>("D4")
                        .HasPrecision(3, 2)
                        .HasColumnType("numeric(3,2)")
                        .HasColumnName("d4")
                        .HasComment("Threshold D4 for CII rating");

                    b.Property<int?>("LowerDeadweight")
                        .HasPrecision(18, 2)
                        .HasColumnType("integer")
                        .HasColumnName("lower_deadweight");

                    b.Property<int>("ShipType")
                        .HasColumnType("integer")
                        .HasColumnName("ship_type");

                    b.Property<int?>("UpperDeadweight")
                        .HasPrecision(18, 2)
                        .HasColumnType("integer")
                        .HasColumnName("upper_deadweight");

                    b.HasKey("Id")
                        .HasName("pk_cii_rating_thresholds");

                    b.HasIndex("ShipType", "LowerDeadweight", "UpperDeadweight")
                        .IsUnique()
                        .HasDatabaseName("IX_CarbonIntensityIndicatorRatingThresholds_ShipType_Deadweight");

                    b.ToTable("cii_rating_thresholds", (string)null);
                });

            modelBuilder.Entity("ShipCalc.Domain.Calculations.CarbonIntensityIndicator.RefLineParams", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<decimal?>("LowerBound")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)")
                        .HasColumnName("lower_bound");

                    b.Property<decimal>("ParameterA")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)")
                        .HasColumnName("parameter_a");

                    b.Property<decimal>("ParameterC")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)")
                        .HasColumnName("parameter_c");

                    b.Property<int>("ShipType")
                        .HasColumnType("integer")
                        .HasColumnName("ship_type");

                    b.Property<decimal?>("UpperBound")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)")
                        .HasColumnName("upper_bound");

                    b.HasKey("Id")
                        .HasName("pk_cii_ref_line_params");

                    b.ToTable("cii_ref_line_params", (string)null);
                });

            modelBuilder.Entity("ShipCalc.Domain.Calculations.CarbonIntensityIndicator.RefLineReductionFactor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("ReductionFactorPercentage")
                        .HasColumnType("integer")
                        .HasColumnName("reduction_factor_percentage")
                        .HasComment("The reduction factor percentage (Z%) for the CII relative to the 2019 reference line");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year")
                        .HasComment("The year for which the reduction factor applies (2023-2030)");

                    b.HasKey("Id")
                        .HasName("pk_cii_req_reduction_factors");

                    b.ToTable("cii_req_reduction_factors", (string)null);
                });

            modelBuilder.Entity("ShipCalc.Domain.Ship", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<decimal>("BlockCoefficient")
                        .HasPrecision(4, 3)
                        .HasColumnType("numeric(4,3)")
                        .HasColumnName("block_coefficient");

                    b.Property<decimal>("CargoCompartmentCubicCapacity")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("cargo_compartment_cubic_capacity");

                    b.Property<decimal>("GrossTonnage")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("gross_tonnage");

                    b.Property<int>("IceClass")
                        .HasColumnType("integer")
                        .HasColumnName("ice_class");

                    b.Property<int>("ImoNumber")
                        .HasColumnType("integer")
                        .HasColumnName("imo_number")
                        .HasComment("Unique IMO number for the ship");

                    b.Property<string>("ShipName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ship_name");

                    b.Property<int>("ShipType")
                        .HasColumnType("integer")
                        .HasColumnName("ship_type");

                    b.Property<decimal>("SummerDeadweight")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("summer_deadweight");

                    b.HasKey("Id")
                        .HasName("pk_ships");

                    b.HasIndex("ImoNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_ships_imo_number");

                    b.ToTable("ships", null, t =>
                        {
                            t.HasCheckConstraint("ck_ship_block_coefficient_range", "\"block_coefficient\" >= 0 AND \"block_coefficient\" <= 1");
                        });
                });

            modelBuilder.Entity("ShipCalc.Domain.Calculations.CarbonIntensityIndicator.CarbonIntensityIndicatorCalculation", b =>
                {
                    b.HasOne("ShipCalc.Domain.Ship", null)
                        .WithOne()
                        .HasForeignKey("ShipCalc.Domain.Calculations.CarbonIntensityIndicator.CarbonIntensityIndicatorCalculation", "ShipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_calculation_datas_ships_ship_id");
                });
#pragma warning restore 612, 618
        }
    }
}
